// Mocks generated by Mockito 5.4.4 from annotations
// in meal_generator_planner/test/unit/meal_generation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:meal_generator_planner/data/models/enums.dart' as _i5;
import 'package:meal_generator_planner/data/models/meal.dart' as _i4;
import 'package:meal_generator_planner/data/repositories/meal_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MealRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealRepository extends _i1.Mock implements _i2.MealRepository {
  MockMealRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Meal>> getAllMeals() => (super.noSuchMethod(
        Invocation.method(
          #getAllMeals,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
      ) as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<List<_i4.Meal>> getMealsByCategory(_i5.MealCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMealsByCategory,
          [category],
        ),
        returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
      ) as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<_i4.Meal?> getMealById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMealById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Meal?>.value(),
      ) as _i3.Future<_i4.Meal?>);

  @override
  _i3.Future<void> saveMeal(_i4.Meal? meal) => (super.noSuchMethod(
        Invocation.method(
          #saveMeal,
          [meal],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMeal(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMeal,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Meal>> getFavoriteMeals() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteMeals,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
      ) as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<void> toggleMealFavorite(String? mealId) => (super.noSuchMethod(
        Invocation.method(
          #toggleMealFavorite,
          [mealId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Meal>> searchMeals(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchMeals,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
      ) as _i3.Future<List<_i4.Meal>>);
}
