// Mocks generated by Mockito 5.4.4 from annotations
// in meal_generator_planner/test/integration/meal_plan_regeneration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:meal_generator_planner/data/models/meal.dart' as _i4;
import 'package:meal_generator_planner/data/models/meal_plan.dart' as _i6;
import 'package:meal_generator_planner/data/repositories/meal_plan_repository.dart'
    as _i5;
import 'package:meal_generator_planner/data/repositories/meal_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MealRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealRepository extends _i1.Mock implements _i2.MealRepository {
  MockMealRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Meal>> getAllMeals() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMeals, []),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<List<_i4.Meal>> getMealsByCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getMealsByCategory, [category]),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<_i4.Meal?> getMealById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMealById, [id]),
            returnValue: _i3.Future<_i4.Meal?>.value(),
          )
          as _i3.Future<_i4.Meal?>);

  @override
  _i3.Future<void> addMeal(_i4.Meal? meal) =>
      (super.noSuchMethod(
            Invocation.method(#addMeal, [meal]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateMeal(_i4.Meal? meal) =>
      (super.noSuchMethod(
            Invocation.method(#updateMeal, [meal]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMeal(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMeal, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Meal>> getFavoriteMeals() =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteMeals, []),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<void> toggleMealFavorite(String? mealId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleMealFavorite, [mealId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Meal>> searchMeals(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchMeals, [query]),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<List<_i4.Meal>> getMealsByDietaryTags(
    List<_i4.DietaryTag>? tags,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMealsByDietaryTags, [tags]),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<List<_i4.Meal>> getRecentMeals(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentMeals, [since]),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);

  @override
  _i3.Future<List<_i4.Meal>> getMealsExcludingIds(List<String>? excludedIds) =>
      (super.noSuchMethod(
            Invocation.method(#getMealsExcludingIds, [excludedIds]),
            returnValue: _i3.Future<List<_i4.Meal>>.value(<_i4.Meal>[]),
          )
          as _i3.Future<List<_i4.Meal>>);
}

/// A class which mocks [MealPlanRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealPlanRepository extends _i1.Mock
    implements _i5.MealPlanRepository {
  MockMealPlanRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.MealPlan>> getAllMealPlans() =>
      (super.noSuchMethod(
            Invocation.method(#getAllMealPlans, []),
            returnValue: _i3.Future<List<_i6.MealPlan>>.value(<_i6.MealPlan>[]),
          )
          as _i3.Future<List<_i6.MealPlan>>);

  @override
  _i3.Future<_i6.MealPlan?> getMealPlanByDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getMealPlanByDate, [date]),
            returnValue: _i3.Future<_i6.MealPlan?>.value(),
          )
          as _i3.Future<_i6.MealPlan?>);

  @override
  _i3.Future<List<_i6.MealPlan>> getMealPlansInRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMealPlansInRange, [startDate, endDate]),
            returnValue: _i3.Future<List<_i6.MealPlan>>.value(<_i6.MealPlan>[]),
          )
          as _i3.Future<List<_i6.MealPlan>>);

  @override
  _i3.Future<void> addMealPlan(_i6.MealPlan? mealPlan) =>
      (super.noSuchMethod(
            Invocation.method(#addMealPlan, [mealPlan]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateMealPlan(_i6.MealPlan? mealPlan) =>
      (super.noSuchMethod(
            Invocation.method(#updateMealPlan, [mealPlan]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteMealPlan(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMealPlan, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.MealPlan>> getCurrentWeekMealPlans() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentWeekMealPlans, []),
            returnValue: _i3.Future<List<_i6.MealPlan>>.value(<_i6.MealPlan>[]),
          )
          as _i3.Future<List<_i6.MealPlan>>);

  @override
  _i3.Future<bool> hasMealPlanForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#hasMealPlanForDate, [date]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i6.MealPlan>> getMealPlansForWeek(DateTime? weekStartDate) =>
      (super.noSuchMethod(
            Invocation.method(#getMealPlansForWeek, [weekStartDate]),
            returnValue: _i3.Future<List<_i6.MealPlan>>.value(<_i6.MealPlan>[]),
          )
          as _i3.Future<List<_i6.MealPlan>>);

  @override
  _i3.Future<_i6.MealPlan?> getMostRecentMealPlan() =>
      (super.noSuchMethod(
            Invocation.method(#getMostRecentMealPlan, []),
            returnValue: _i3.Future<_i6.MealPlan?>.value(),
          )
          as _i3.Future<_i6.MealPlan?>);

  @override
  _i3.Future<List<String>> getRecentMealIds(DateTime? since) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentMealIds, [since]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);
}
