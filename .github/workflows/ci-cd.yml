name: Flutter CI/CD with Vercel

# Concurrency Control: Prevents multiple workflow runs for the same branch/PR from running simultaneously.
# The most recent run will proceed, and any older, in-progress runs will be canceled.
on:
  push:
    branches:
      - main
      - release
      - dev
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: ${{ vars.FLUTTER_VERSION || '3.35.3' }}  # Default to 3.35.3 if not set
  NODE_VERSION: '20'
  FLUTTER_WORKING_DIR: ./

jobs:
  validate:
    name: 🧪 Validate & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FLUTTER_WORKING_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for commit message validation
          fetch-depth: 0

      - name: Validate commit message (for PRs)
        if: github.event_name == 'pull_request'
        run: |
          # Check if commits follow conventional commit format
          git log --format="%s" origin/${{ github.base_ref }}..${{ github.head_ref }} | \
          while read commit_msg; do
            if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
              echo "Invalid commit message: $commit_msg"
              echo "Please follow conventional commit format: type(scope): description"
              exit 1
            fi
          done
          echo "All commit messages follow conventional format"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code (Hive & JSON)
        run: |
          dart run build_runner build --delete-conflicting-outputs
          # Verify generated files exist
          find lib -name "*.g.dart" -type f | head -5

      - name: Analyze code
        run: flutter analyze

      - name: Check formatting
        run: flutter format --output=none --set-exit-if-changed .

      - name: Run tests
        run: |
          flutter test --coverage
          flutter test test/unit/
          flutter test test/widget/
          flutter test test/integration/ || echo "Integration tests may require additional setup"

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage-${{ github.ref_name }}
          path: |
            coverage/
            test/coverage.html
          retention-days: ${{ vars.ARTIFACT_RETENTION_DAYS || 7 }}

      - name: GitGuardian Security Scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: --all-policies --verbose

      - name: Security audit
        run: |
          # Check for sensitive files that shouldn't be committed
          ! find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -q .
          # Verify .gitignore excludes sensitive folders
          grep -q ".qoder/" .gitignore
          echo "Security audit passed"

      - name: Verify project structure compliance
        run: |
          # Verify core architecture directories exist
          test -d "lib/core/constants" || { echo "Missing lib/core/constants"; exit 1; }
          test -d "lib/core/themes" || { echo "Missing lib/core/themes"; exit 1; }
          test -d "lib/core/router" || { echo "Missing lib/core/router"; exit 1; }
          test -d "lib/data/models" || { echo "Missing lib/data/models"; exit 1; }
          test -d "lib/data/repositories" || { echo "Missing lib/data/repositories"; exit 1; }
          test -d "lib/features" || { echo "Missing lib/features"; exit 1; }
          test -d "lib/widgets" || { echo "Missing lib/widgets"; exit 1; }
          test -d "test/unit" || { echo "Missing test/unit"; exit 1; }
          test -d "test/widget" || { echo "Missing test/widget"; exit 1; }
          test -d "test/integration" || { echo "Missing test/integration"; exit 1; }
          echo "Project structure compliance verified"

      - name: 📋 Write Test Summary
        if: always()
        working-directory: ./
        run: |
          echo "## 🧪 Validation & Test Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ✅ Passed" >> $GITHUB_STEP_SUMMARY
            echo "- Code Analysis: ✅ Clean" >> $GITHUB_STEP_SUMMARY
            echo "- Format Check: ✅ Compliant" >> $GITHUB_STEP_SUMMARY
            echo "- Tests: ✅ All Passed" >> $GITHUB_STEP_SUMMARY
            echo "- GitGuardian: ✅ No Secrets Detected" >> $GITHUB_STEP_SUMMARY
            echo "- Security: ✅ Audit Passed" >> $GITHUB_STEP_SUMMARY
            if [ -f "coverage/lcov.info" ]; then
              echo "- Coverage: ✅ Report Generated" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Generated Files: $(find lib -name '*.g.dart' -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning

      - name: GitGuardian Comprehensive Scan
        uses: GitGuardian/ggshield-action@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: --all-policies --verbose --show-secrets

      - name: 📋 Write Security Summary
        if: always()
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ✅ No Security Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "- GitGuardian: ✅ All Policies Passed" >> $GITHUB_STEP_SUMMARY
            echo "- Secrets Detection: ✅ Clean" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Security Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "- Action Required: ⚠️ Please review GitGuardian findings" >> $GITHUB_STEP_SUMMARY
          fi

  build-android:
    name: 📱 Build Android
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push'
    defaults:
      run:
        working-directory: ${{ env.FLUTTER_WORKING_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code (Hive & JSON)
        run: |
          dart run build_runner build --delete-conflicting-outputs
          # Verify generated files exist for Android build
          find lib -name "*.g.dart" -type f | head -5

      - name: Build Android APK
        run: |
          if [ "${{ github.ref_name }}" == "release" ]; then
            flutter build apk --release --target-platform android-arm,android-arm64,android-x64
          else
            flutter build apk --debug
          fi
          # Verify APK was created
          ls -la build/app/outputs/flutter-apk/

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.ref_name }}
          path: ${{ env.FLUTTER_WORKING_DIR }}/build/app/outputs/flutter-apk/app-${{ github.ref_name == 'release' && 'release' || 'debug' }}.apk
          retention-days: ${{ vars.ARTIFACT_RETENTION_DAYS || 7 }}
    
      - name: 📋 Write Android Build Summary
        if: always()
        working-directory: ./
        run: |
          echo "## 📱 Android Build Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ✅ APK built successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Retention: ⏳ ${{ vars.ARTIFACT_RETENTION_DAYS || 7 }} days" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi

  build-web:
    name: 🌐 Build Web
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'push' && (
        github.ref == 'refs/heads/main' || 
        github.ref == 'refs/heads/release' || 
        github.ref == 'refs/heads/dev'
      ))
    defaults:
      run:
        working-directory: ${{ env.FLUTTER_WORKING_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Generate code (Hive & JSON)
        run: |
          dart run build_runner build --delete-conflicting-outputs
          # Verify generated files exist for Web build
          find lib -name "*.g.dart" -type f | head -5

      - name: Build Web
        run: |
          flutter build web --release --web-renderer canvaskit
          # Ensure proper asset handling for offline-first architecture
          ls -la build/web/

      - name: Upload Web Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.ref_name }}
          path: ${{ env.FLUTTER_WORKING_DIR }}/build/web/
          retention-days: ${{ vars.ARTIFACT_RETENTION_DAYS || 7 }}

      - name: 📋 Write Web Build Summary
        if: always()
        working-directory: ./
        run: |
          echo "## 🌐 Web Build Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ✅ Web built successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Retention: ⏳ ${{ vars.ARTIFACT_RETENTION_DAYS || 7 }} days" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [validate, build-web]
    # Run this job only when the trigger is a push to specific branches or a pull request.
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'push' && (
        github.ref == 'refs/heads/main' || 
        github.ref == 'refs/heads/release' || 
        github.ref == 'refs/heads/dev'
      ))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Web Artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build-${{ github.ref_name }}
          path: ./build/web/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          # Deploy to production for main and release branches
          vercel-prod: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' }}
          working-directory: ./build/web/

      - name: 📋 Write Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "- Status: ✅ Deployed successfully to Vercel" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release' }}" == "true" ]; then
              echo "- Environment: 🌟 Production" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Environment: 🧪 Preview" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- Status: ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

# Simplified Summary Job: The final summary job is cleaner as it only needs to check the status of fewer jobs.
  workflow-summary:
    name: 📋 Final Workflow Summary
    runs-on: ubuntu-latest
    needs: [validate, security, build-android, build-web, deploy]
    if: always()
    steps:
      - name: Consolidated Summary
        run: |
          echo "## 🏁 Complete Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** \`${{ github.event_name }}\` by \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### Job Statuses" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation & Tests:** \`${{ needs.validate.result }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** \`${{ needs.security.result }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-android.result }}" != "skipped" ]; then
            echo "- **Android Build:** \`${{ needs.build-android.result }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-web.result }}" != "skipped" ]; then
            echo "- **Web Build:** \`${{ needs.build-web.result }}\`" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy.result }}" != "skipped" ]; then
            echo "- **Vercel Deployment:** \`${{ needs.deploy.result }}\`" >> $GITHUB_STEP_SUMMARY
          fi